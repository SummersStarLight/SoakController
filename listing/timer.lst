C51 COMPILER V7.50   TIMER                                                                 04/14/2014 23:39:31 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\output\timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\timer.c LARGE BROWSE INCDIR(.\include\) DEBUG OBJECTEXTEND PRINT(.\l
                    -isting\timer.lst) OBJECT(.\output\timer.obj)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC12C5Axx Series 16-bit Timer Demo -------------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-755-82905966 ----------------------------------------*/
   6          /* --- Tel: 86-755-82948412 ----------------------------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* If you want to use the program or the program referenced in the  */
   9          /* article, please specify in which data and procedures from STC    */
  10          /*------------------------------------------------------------------*/
  11          
  12          #include <reg52.h>
  13          #include <timer.h>
  14          #include <parameter.h>
  15          #include <position.h>
  16          #include <operation.h>
  17          #include <dispatch.h>
  18          #include <key.h>
  19          
  20          typedef unsigned char BYTE;
  21          typedef unsigned int WORD;
  22          
  23          //-----------------------------------------------
  24          
  25          #define T1MS 53536      //1ms timer calculation method in 1T mode
  26          #define T10MS 5536      //1ms timer calculation method in 1T mode
  27          
  28          /* define SFR */
  29          sfr AUXR = 0x8e;                    //Auxiliary register
  30          
  31          //sbit TEST_LED = P2^0;               //work LED, flash once per second
  32          //sbit TEST_LED1 = P2^1;               //work LED, flash once per second
  33          /* define variables */
  34          //-----------------------------------------------
  35          BYTE count1s; // 1s时间计数
  36          BYTE countRestDisplay; //液晶屏定时复位计数器
  37          BYTE countManiPosition; //机械表位置检测有效时间
  38          
  39          /***************************************************************************/
  40          // 槽计时函数 每秒调用一次
  41          // 参数：无
  42          // 返回值：无   
  43          /***************************************************************************/
  44          void cisternCount()
  45          {
  46   1              unsigned char i;
  47   1              for(i=0; i<8; i++)
  48   1              {
  49   2                      if(cistern[i].cisternStatus == InCounting || cistern[i].cisternStatus == Ready)
  50   2                      {
  51   3                              cistern[i].currentTime ++;
  52   3                              if(cistern[i].currentTime >= cistern[i].settingTime)
  53   3                              {
  54   4                                      if(i != 0 && i != 7)// 进口出口不安时间就绪
C51 COMPILER V7.50   TIMER                                                                 04/14/2014 23:39:31 PAGE 2   

  55   4                                      {
  56   5                                              cistern[i].cisternStatus = Ready;
  57   5                                      }
  58   4                                      else
  59   4                                      {
  60   5                                              cistern[i].currentTime = 0;
  61   5                                      }
  62   4                              }
  63   3                              if(cistern[i].currentTime % 60 == 0)
  64   3                              {
  65   4                                      displayFlag = 1;
  66   4                              }
  67   3                      }
  68   2              }
  69   1      }
  70          
  71          /* Timer0 interrupt routine */
  72          void tm0_isr() interrupt 1 using 1  //1ms
  73          {
  74   1          TL0 = T1MS;                     //reload timer0 low byte
  75   1          TH0 = T1MS >> 8;                //reload timer0 high byte
  76   1      //      TEST_LED = ! TEST_LED;
  77   1              countManiPosition ++;
  78   1              //if(countManiPosition == 100)
  79   1              //{
  80   1                      maniPosition();
  81   1              //      countManiPosition = 0;
  82   1              //}
  83   1      }
  84          
  85          /* Timer1 interrupt routine */
  86          void tm1_isr() interrupt 3 using 1  //5ms
  87          {
  88   1          TL1 = T10MS;                     //reload timer1 low byte
  89   1          TH1 = T10MS >> 8;                //reload timer1 high byte
  90   1              count1s ++;
  91   1      //      TEST_LED1 = ~TEST_LED1;
  92   1              if(displayMode != PowerOffed)
  93   1              {
  94   2                      if(count1s == 200) //1s
  95   2                      {
  96   3                              count1s = 0;
  97   3                              cisternCount();
  98   3      //                      TEST_LED1 = ! TEST_LED1;      //work LED flash
  99   3                              ManiOperationTimer ++; //机械臂操作定时器
 100   3                              //液晶定时复位操作
 101   3                              countRestDisplay ++;
 102   3                              if(countRestDisplay == 5)
 103   3                              {
 104   4                                      displayFlag = 3; //初始化液晶并刷新显示
 105   4                                      countRestDisplay = 0;   
 106   4                              }
 107   3                      }
 108   2                      if(count1s%2==0) //10ms
 109   2                      {
 110   3                              if(runMode == AutoMode)
 111   3                              {
 112   4                                      ManiDispatch();
 113   4                              }
 114   3                              else
 115   3                              {
 116   4                                      ManualDispatch();
C51 COMPILER V7.50   TIMER                                                                 04/14/2014 23:39:31 PAGE 3   

 117   4                              }
 118   3                              Key_Scan();
 119   3                      }
 120   2              }
 121   1      }
 122          
 123          //-----------------------------------------------
 124          
 125          /* timer_init program */
 126          void timer_init()
 127          {
 128   1          AUXR = 0x80|0x40;                    //timer0 work in 1T mode
 129   1          TMOD = 0x01|0x10;                    //set timer0 as mode1 (16-bit)
 130   1          TL0 = T1MS;                     //initial timer0 low byte
 131   1          TH0 = T1MS >> 8;                //initial timer0 high byte
 132   1          TR0 = 1;                        //timer0 start running
 133   1          ET0 = 1;                        //enable timer0 interrupt
 134   1      
 135   1              TL1 = T10MS;                     //initial timer1 low byte
 136   1          TH1 = T10MS >> 8;                //initial timer1 high byte
 137   1          TR1 = 1;                        //timer1 start running
 138   1          ET1 = 1;                        //enable timer1 interrupt
 139   1      
 140   1          EA = 1;                         //open global interrupt switch
 141   1      
 142   1              count1s = 0;
 143   1              countManiPosition = 0;
 144   1              countRestDisplay = 0;
 145   1      }
 146          
 147          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
