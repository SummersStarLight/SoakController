C51 COMPILER V7.50   EPPROM                                                                11/09/2013 19:00:13 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE EPPROM
OBJECT MODULE PLACED IN .\output\epprom.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\epprom.c BROWSE INCDIR(.\include\) DEBUG OBJECTEXTEND PRINT(.\epprom
                    -.lst) OBJECT(.\output\epprom.obj)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC12C5Axx Series MCU ISP/IAP/EEPROM Demo -------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-755-82905966 ----------------------------------------*/
   6          /* --- Tel: 86-755-82948412 ----------------------------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* If you want to use the program or the program referenced in the  */
   9          /* article, please specify in which data and procedures from STC    */
  10          /*------------------------------------------------------------------*/
  11          
  12          #include <reg52.h>
  13          #include <intrins.h>
  14          #include <eeprom.h>
  15          
  16          typedef unsigned char BYTE;
  17          typedef unsigned int WORD;
  18          
  19          /*Declare SFR associated with the IAP */
  20          sfr IAP_DATA    =   0xC2;           //Flash data register
  21          sfr IAP_ADDRH   =   0xC3;           //Flash address HIGH
  22          sfr IAP_ADDRL   =   0xC4;           //Flash address LOW
  23          sfr IAP_CMD     =   0xC5;           //Flash command register
  24          sfr IAP_TRIG    =   0xC6;           //Flash command trigger
  25          sfr IAP_CONTR   =   0xC7;           //Flash control register
  26          
  27          /*Define ISP/IAP/EEPROM command*/
  28          #define CMD_IDLE    0               //Stand-By
  29          #define CMD_READ    1               //Byte-Read
  30          #define CMD_PROGRAM 2               //Byte-Program
  31          #define CMD_ERASE   3               //Sector-Erase
  32          
  33          /*Define ISP/IAP/EEPROM operation const for IAP_CONTR*/
  34          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  35          //#define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  36          #define ENABLE_IAP  0x82            //if SYSCLK<20MHz
  37          //#define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  38          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  39          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  40          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  41          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  42          
  43          //Start address for STC11/10xx EEPROM
  44          #define IAP_ADDRESS 0x0400
  45          
  46          void Delay(BYTE n);
  47          void IapIdle();
  48          BYTE IapReadByte(WORD addr);
  49          void IapProgramByte(WORD addr, BYTE dat);
  50          void IapEraseSector(WORD addr);
  51          
  52          /*----------------------------
  53          Software delay function
  54          ----------------------------*/
C51 COMPILER V7.50   EPPROM                                                                11/09/2013 19:00:13 PAGE 2   

  55          void Delay(BYTE n)
  56          {
  57   1          WORD x;
  58   1      
  59   1          while (n--)
  60   1          {
  61   2              x = 0;
  62   2              while (++x);
  63   2          }
  64   1      }
  65          
  66          /*----------------------------
  67          Disable ISP/IAP/EEPROM function
  68          Make MCU in a safe state
  69          ----------------------------*/
  70          void IapIdle()
  71          {
  72   1          IAP_CONTR = 0;                  //Close IAP function
  73   1          IAP_CMD = 0;                    //Clear command to standby
  74   1          IAP_TRIG = 0;                   //Clear trigger register
  75   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  76   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  77   1      }
  78          
  79          /*----------------------------
  80          Read one byte from ISP/IAP/EEPROM area
  81          Input: addr (ISP/IAP/EEPROM address)
  82          Output:Flash data
  83          ----------------------------*/
  84          BYTE IapReadByte(WORD addr)
  85          {
  86   1          BYTE dat;                       //Data buffer
  87   1      
  88   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  89   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  90   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  91   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  92   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  93   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  94   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  95   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  96   1          IapIdle();                      //Close ISP/IAP/EEPROM function
  97   1      
  98   1          return dat;                     //Return Flash data
  99   1      }
 100          
 101          /*----------------------------
 102          Program one byte to ISP/IAP/EEPROM area
 103          Input: addr (ISP/IAP/EEPROM address)
 104                 dat (ISP/IAP/EEPROM data)
 105          Output:-
 106          ----------------------------*/
 107          void IapProgramByte(WORD addr, BYTE dat)
 108          {
 109   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
 110   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
 111   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 112   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 113   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
 114   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
 115   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
 116   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
C51 COMPILER V7.50   EPPROM                                                                11/09/2013 19:00:13 PAGE 3   

 117   1          IapIdle();
 118   1      }
 119          
 120          /*----------------------------
 121          Erase one sector area
 122          Input: addr (ISP/IAP/EEPROM address)
 123          Output:-
 124          ----------------------------*/
 125          void IapEraseSector(WORD addr)
 126          {
 127   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
 128   1          IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
 129   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
 130   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
 131   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
 132   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
 133   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
 134   1          IapIdle();
 135   1      }
 136          
 137          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     98    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
